//
//  TableViewControllerSpec.swift
//  SpecToolsExampleTests
//
//  Created by Ondrej Rafaj on 11/09/2017.
//  Copyright Â© 2017 manGoweb. All rights reserved.
//

import Foundation
import UIKit
import Quick
import Nimble
import SpecTools

@testable import SpecToolsExample


class TableViewControllerSpec: QuickSpec {
    
    override func spec() {
        var subject: TableViewController!
        
        describe("TableViewController") {
            beforeEach {
                // Create the subject
                subject = TableViewController()
                
                // Give subject a navigation controller
                _ = subject.spec.prepare.assignMockNavigationController()
                
                // Simulate view controller being presented to the screen
                subject.spec.prepare.simulatePresentViewController()
                // Reset the view to specific size
                subject.spec.prepare.set(viewSize: .iPhone6Plus)
            }
            
            it("has a visible table view cell") {
                // Find fifth cell in table view that contains a text "row: 4"
                let cell = subject.view.spec.find.first(tableViewCellWithText: "row: 4", exactMatch: false, visualize: .text)
                expect(cell?.spec.check.isVisible(on: subject.view)).to(beTrue())
            }
            
            it("should have all cells with content") {
                // Create an anumerate closure
                let doesFitClosure: (UITableViewCell)->Bool = { (cell) -> Bool in
                    guard let cell = cell as? TableViewCell else {
                        return false
                    }
                    if cell.textLabel?.text?.count == 0 {
                        return false
                    }
                    if cell.detailTextLabel?.text?.count == 0 {
                        return false
                    }
                    if cell.customLabel.text?.count == 0 {
                        return false
                    }
                    return true
                }
                
                // Test all cells generated by the data source are ok
                let ok = subject.tableView.spec.check.allCells(fit: doesFitClosure)
                expect(ok).to(beTrue())
            }
            
            describe("when user taps on a cell") {
                var tapped: Bool = false
                
                beforeEach {
                    subject.didTapOnCell = { indexPath in
                        tapped = true
                    }
                    subject.tableView!.spec.action.tap(row: 0)
                }
                
                it("should register a tap") {
                    expect(tapped).toEventually(equal(true))
                }
            }
        }
    }
}
